module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: ['@typescript-eslint/recommended'],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js', 'dist/**', 'node_modules/**'],
  rules: {
    'no-console': 'error',
    'no-debugger': 'error',
    'max-lines': ['error', { max: 1000, skipBlankLines: true, skipComments: true }],
    complexity: ['error', { max: 30 }],
    'max-depth': ['error', { max: 6 }],
    'max-params': ['error', { max: 6 }],
    'no-var': 'error',
    'prefer-const': 'error',
    'prefer-arrow-callback': 'error',
    'prefer-template': 'error',
    'no-useless-return': 'error',
    'no-useless-concat': 'error',
    'prefer-destructuring': ['error', { object: true, array: false }],
    'no-loop-func': 'error',
    'no-iterator': 'error',
    'no-restricted-syntax': [
      'error',
      {
        selector: 'ForStatement',
        message: 'Use functional programming methods like map, filter, reduce instead of for loops',
      },
      {
        selector: 'WhileStatement',
        message: 'Use functional programming methods or recursion instead of while loops',
      },
      {
        selector: 'DoWhileStatement',
        message: 'Use functional programming methods or recursion instead of do-while loops',
      },
    ],
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-readonly': 'error',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
  },
}
